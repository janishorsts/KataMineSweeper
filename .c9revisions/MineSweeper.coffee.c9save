{"ts":1362414656551,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"expect = require('chai').expect\n_ = require 'underscore'\n\n\n# TESTS\n\ndescribe 'Game', ->\n  describe '#display()', ->\n\n    examples = [\n      {input: '.',       output: '0'},\n      {input: '*',       output: '*'},\n      {input: '*.',      output: '*1'}\n      {input: '.*',      output: '1*'},\n      {input: '*.*',     output: '*2*'},\n      {input: '.*.',     output: '1*1'},\n      {input: '..*.*..', output: '01*2*10'},\n\n      {input: \"*\\n.\",    output: \"*\\n1\"}\n      {input: \".\\n*\",    output: \"1\\n*\"}\n      {input: \".*\\n.*\",    output: \"2*\\n2*\"}\n    ]\n\n    _.each examples, (example) ->\n      it \"should display '#{example.output}' when input is '#{example.input}'\", ->\n        game = new Game input: example.input\n        expect(game.display()).to.equal example.output\n\ndescribe 'MineSweeper', ->\n  mineSweeper = {}\n\n  before ->\n    mineSweeper = new MineSweeper\n\n  describe '#run()', ->\n    it 'should end when input reaches 0 0', ->\n      mineSweeper.input('0 0');\n      expect(mineSweeper.run()).to.equal ''\n\n\n# CODE\n\nclass MineSweeper\n  input: ->\n  run: ->\n    ''\n\nclass Game\n  constructor: (@options) ->\n  display: ->\n    lines = @options.input.split('\\n')\n\n    _.each lines, (line, idy) ->\n      lines[idy] = line.replace(/\\./g, '0').split('')\n\n    _.each lines, (line, lineIndex) ->\n      _.each line, (square, idx) ->\n        return if lines[lineIndex][idx] == '*'\n\n        lines[lineIndex][idx]++ if lines[lineIndex][idx - 1] is '*'\n        lines[lineIndex][idx]++ if lines[lineIndex][idx + 1] is '*'\n\n        lines[lineIndex][idx]++ if lines[lineIndex + 1]?[idx] is '*'\n        lines[lineIndex][idx]++ if lines[lineIndex - 1]?[idx] is '*'\n\n    return lines.join('\\n').replace(/\\,/g, '')"]],"start1":0,"start2":0,"length1":0,"length2":1697}]],"length":1697}
